package model;

import java.util.HashMap;

/**
 * Represents a question on the PSC Discrepancies survey, encapsulating a unique name and the column
 * number in the CSV generated by the survey. Given a column number, the matching question can be
 * retrieved using {@link #getByZeroIndexId(int)}.
 * 
 * <h2>Naming</h2>
 * Leaving aside UNKNOWN, the names of the values of this enum follow a pattern.
 * Each enum starts with the list of one-or-more PSC Discrepancy types:
 * <ul>
 * <li>DTPSCTYPE - the currently recorded PSC Type is wrong. 
 * e.g. the existing info at CH says the PSC is an ORP, when it should be Person. The correct info will be filled in within this survey.</li>
 * <li>DTPSCMISSING - a PSC is missing from the CH records and the details will be filled in within this survey.</li>
 * <li>DTPERSON - some of the info about this person PSC is wrong.</li>
 * <li>DTCOMPANY - some of the info about this company PSC is wrong.</li>
 * <li>DTORP - some of the info about this ORP PSC is wrong.</li>
 * <li>more to follow</li>
 * </ul>
 * Next in the enum name is one of:
 * <ul>
 * <li>REGISTERED - this will be a question about what info is already stored on the CH register.</li>
 * <li>OEPROVIDED - this will be a question about what the Obliged Entity proposes should be stored on the CH register.</li>
 * <li>DISCREPANCYSUBTYPE - this will be a question about what specific subtype of discrepancy this is.</li>
 * </ul>
 * The last part of the enum shows the specific question, e.g. ADDRESS_1
 */
public enum PscDiscrepancySurveyQuestion {
    UNKNOWN(-1),
    DTPSCTYPE_REGISTERED_PSC_TYPE(16),
    DTPSCTYPE_REGISTERED_PERSON_FIRST_NAME(17),
    DTPSCTYPE_REGISTERED_PERSON_SURNAME(18),
    DTPSCTYPE_REGISTERED_PERSON_DOB_MONTH(19),
    DTPSCTYPE_REGISTERED_PERSON_DOB_YEAR(20),
    DTPSCTYPE_REGISTERED_COMPANY_NAME(21),
    DTPSCTYPE_REGISTERED_COMPANY_NUMBER(22),
    DTPSCTYPE_REGISTERED_ORP_TITLE(23),
    DTPSCTYPE_REGISTERED_EXEMPTION(24),
    DTPSCTYPE_REGISTERED_STATEMENT(25),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_PSC_TYPE(26),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_PERSON_FIRST_NAME(27),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_PERSON_SURNAME(28),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_PERSON_DOB_MONTH(29),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_PERSON_DOB_YEAR(30),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_PERSON_NATIONALITY(31),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_PERSON_PLACE_OF_RESIDENCE(32),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_COMPANY_NAME(33),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_COMPANY_NUMBER(34),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_COMPANY_WHERE_REGISTERED(35),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_COMPANY_WHERE_INCORPORATED(36),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_ORP_TITLE(37),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_GOVERNING_LAW(38),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_LEGAL_FORM(39),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_ADDRESS_1(40),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_ADDRESS_2(41),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_ADDRESS_3(42),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_ADDRESS_4(43),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_ADDRESS_5(44),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_ADDRESS_6(45),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_ADDRESS_POSTCODE(46),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_CH_NOTIFIED_OF_PSC_DATE(47),
    DTPSCTYPE_DTPSCMISSING_OEPROVIDED_NATURE_OF_CONTROL(48),
    DTPERSON_REGISTERED_PERSON_FIRST_NAME(49),
    DTPERSON_REGISTERED_PERSON_SURNAME(50),
    DTPERSON_REGISTERED_PERSON_DOB_MONTH(51),
    DTPERSON_REGISTERED_PERSON_DOB_YEAR(52),
    DTPERSON_DISCREPANCYSUBTYPE(53),
    ROUTING_IS_DISCREPANCY_PERSON_NAME(54),
    DTPERSON_OEPROVIDED_PERSON_FIRST_NAME(55),
    DTPERSON_OEPROVIDED_PERSON_SURNAME(56),
    ROUTING_IS_DISCREPANCY_PERSON_DOB(57),
    DTPERSON_OEPROVIDED_PERSON_DOB_MONTH(58),
    DTPERSON_OEPROVIDED_PERSON_DOB_YEAR(59),
    ROUTING_IS_DISCREPANCY_PERSON_NATIONALITY(60),
    DTPERSON_OEPROVIDED_PERSON_NATIONALITY(61),
    ROUTING_IS_DISCREPANCY_PERSON_PLACE_OF_RESIDENCE(62),
    DTPERSON_OEPROVIDED_PERSON_PLACE_OF_RESIDENCE(63),
    DTCOMPANY_REGISTERED_COMPANY_NAME(64),
    DTCOMPANY_REGISTERED_COMPANY_NUMBER(65),
    //DTCOMPANY_DISCREPANCYSUBTYPE(66),
    //TODO: 66-75
    DTORP_REGISTERED_ORP_TITLE(76),
    DTORP_DISCREPANCYSUBTYPE(77),
    DTORP_ROUTING_IS_DISCREPANCY_ORP_TITLE(78),
    DTORP_OEPROVIDED_ORP_TITLE(79),
    DTCOMPANY_ROUTING_IS_DISCREPANCY_GOVERNING_LAW(80),
    DTCOMPANY_DTORP_OEPROVIDED_GOVERNING_LAW(81),
    DTCOMPANY_ROUTING_IS_DISCREPANCY_LEGAL_FORM(82),
    DTCOMPANY_DTORP_OEPROVIDED_LEGAL_FORM(83),
    DTCOMPANY_DTPERSON_DTORP_IS_DISCREPANCY_CORRESPONDENCE_ADDRESS(84),
    DTCOMPANY_DTPERSON_DTORP_OEPROVIDED_CORRESPONDENCE_ADDRESS_1(85),
    DTCOMPANY_DTPERSON_DTORP_OEPROVIDED_CORRESPONDENCE_ADDRESS_2(86),
    DTCOMPANY_DTPERSON_DTORP_OEPROVIDED_CORRESPONDENCE_ADDRESS_3(87),
    DTCOMPANY_DTPERSON_DTORP_OEPROVIDED_CORRESPONDENCE_ADDRESS_4(88),
    DTCOMPANY_DTPERSON_DTORP_OEPROVIDED_CORRESPONDENCE_ADDRESS_5(89),
    DTCOMPANY_DTPERSON_DTORP_OEPROVIDED_CORRESPONDENCE_ADDRESS_6(90),
    DTCOMPANY_DTPERSON_DTORP_OEPROVIDED_CORRESPONDENCE_ADDRESS_POSTCODE(91),
    DTCOMPANY_DTPERSON_DTORP_ROUTING_DATE_CH_NOTIFIED_OF_PSC(92),
    DTCOMPANY_DTPERSON_DTORP_OEPROVIDED_DATE_CH_NOTIFIED_OF_PSC(93),
    DTCOMPANY_DTPERSON_DTORP_ROUTING_DATE_CH_NATURE_OF_CONTROL(94),
    DTCOMPANY_DTPERSON_DTORP_OEPROVIDED_NATURE_OF_CONTROL(95),
    //TODO: 96, 97
    DTOTHER_ROUTING_ANY_OTHER_DISCREPANCIES(98),
    DTOTHER_FREETEXT(99);

    private static final HashMap<Integer, PscDiscrepancySurveyQuestion> INDEXED_BY_CSV_COLUMN;

    static {
        HashMap<Integer, PscDiscrepancySurveyQuestion> tmpQMap = new HashMap<>();
        PscDiscrepancySurveyQuestion[] values = values();
        for (PscDiscrepancySurveyQuestion q : values) {
            PscDiscrepancySurveyQuestion preexisting = tmpQMap.get(q.getZeroIndexedCsvColumn());
            if (preexisting != null) {
                throw new IllegalStateException(
                                "Duplicate question column index in two questions: ");
            }
            tmpQMap.put(q.getZeroIndexedCsvColumn(), q);
        }
        INDEXED_BY_CSV_COLUMN = tmpQMap;
    }

    /**
     * Returns the PscDiscrepancyQuestion that whose return for {@link #getZeroIndexedCsvColumn()}
     * matches id. If no match can be found, this returns {@link #UNKNOWN}.
     */
    public static PscDiscrepancySurveyQuestion getByZeroIndexId(int id) {
        PscDiscrepancySurveyQuestion q = INDEXED_BY_CSV_COLUMN.get(id);
        if (q == null) {
            return UNKNOWN;
        }
        return q;
    }

    private final int id;

    private PscDiscrepancySurveyQuestion(int id) {
        this.id = id;
    }

    public int getZeroIndexedCsvColumn() {
        return id;
    }
}
